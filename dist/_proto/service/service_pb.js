// source: service/service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.service.ActionConfig', null, global);
goog.exportSymbol('proto.service.ActionConfig.Character', null, global);
goog.exportSymbol('proto.service.ActionConfig.Object', null, global);
goog.exportSymbol('proto.service.AudioConfig', null, global);
goog.exportSymbol('proto.service.GetResponseRequest', null, global);
goog.exportSymbol('proto.service.GetResponseRequest.GetResponseConfig', null, global);
goog.exportSymbol('proto.service.GetResponseRequest.GetResponseData', null, global);
goog.exportSymbol('proto.service.GetResponseRequest.GetResponseData.InputTypeCase', null, global);
goog.exportSymbol('proto.service.GetResponseRequest.RequestTypeCase', null, global);
goog.exportSymbol('proto.service.GetResponseRequestSingle', null, global);
goog.exportSymbol('proto.service.GetResponseResponse', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.ActionResponse', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.AudioResponse', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.ResponseTypeCase', null, global);
goog.exportSymbol('proto.service.GetResponseResponse.UserTranscript', null, global);
goog.exportSymbol('proto.service.HelloRequest', null, global);
goog.exportSymbol('proto.service.HelloResponse', null, global);
goog.exportSymbol('proto.service.STTRequest', null, global);
goog.exportSymbol('proto.service.STTRequest.RequestTypeCase', null, global);
goog.exportSymbol('proto.service.STTResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.AudioConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.AudioConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.AudioConfig.displayName = 'proto.service.AudioConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ActionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.service.ActionConfig.repeatedFields_, null);
};
goog.inherits(proto.service.ActionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ActionConfig.displayName = 'proto.service.ActionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ActionConfig.Character = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ActionConfig.Character, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ActionConfig.Character.displayName = 'proto.service.ActionConfig.Character';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.ActionConfig.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.ActionConfig.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.ActionConfig.Object.displayName = 'proto.service.ActionConfig.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.STTRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.STTRequest.oneofGroups_);
};
goog.inherits(proto.service.STTRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.STTRequest.displayName = 'proto.service.STTRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.STTResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.STTResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.STTResponse.displayName = 'proto.service.STTResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.GetResponseRequest.oneofGroups_);
};
goog.inherits(proto.service.GetResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseRequest.displayName = 'proto.service.GetResponseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequest.GetResponseConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseRequest.GetResponseConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseRequest.GetResponseConfig.displayName = 'proto.service.GetResponseRequest.GetResponseConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequest.GetResponseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.GetResponseRequest.GetResponseData.oneofGroups_);
};
goog.inherits(proto.service.GetResponseRequest.GetResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseRequest.GetResponseData.displayName = 'proto.service.GetResponseRequest.GetResponseData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseRequestSingle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseRequestSingle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseRequestSingle.displayName = 'proto.service.GetResponseRequestSingle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.service.GetResponseResponse.oneofGroups_);
};
goog.inherits(proto.service.GetResponseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseResponse.displayName = 'proto.service.GetResponseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse.AudioResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseResponse.AudioResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseResponse.AudioResponse.displayName = 'proto.service.GetResponseResponse.AudioResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse.ActionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseResponse.ActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseResponse.ActionResponse.displayName = 'proto.service.GetResponseResponse.ActionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.GetResponseResponse.UserTranscript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.GetResponseResponse.UserTranscript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.GetResponseResponse.UserTranscript.displayName = 'proto.service.GetResponseResponse.UserTranscript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.HelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.HelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.HelloRequest.displayName = 'proto.service.HelloRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.HelloResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.HelloResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.service.HelloResponse.displayName = 'proto.service.HelloResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.AudioConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.service.AudioConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.AudioConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.AudioConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleRateHertz: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.AudioConfig}
 */
proto.service.AudioConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.AudioConfig;
  return proto.service.AudioConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.AudioConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.AudioConfig}
 */
proto.service.AudioConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleRateHertz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.AudioConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.AudioConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.AudioConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.AudioConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRateHertz();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 sample_rate_hertz = 1;
 * @return {number}
 */
proto.service.AudioConfig.prototype.getSampleRateHertz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.AudioConfig} returns this
 */
proto.service.AudioConfig.prototype.setSampleRateHertz = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.service.ActionConfig.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ActionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ActionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ActionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    charactersList: jspb.Message.toObjectList(msg.getCharactersList(),
    proto.service.ActionConfig.Character.toObject, includeInstance),
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.service.ActionConfig.Object.toObject, includeInstance),
    classification: jspb.Message.getFieldWithDefault(msg, 4, ""),
    contextLevel: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ActionConfig}
 */
proto.service.ActionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ActionConfig;
  return proto.service.ActionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ActionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ActionConfig}
 */
proto.service.ActionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addActions(value);
      break;
    case 2:
      var value = new proto.service.ActionConfig.Character;
      reader.readMessage(value,proto.service.ActionConfig.Character.deserializeBinaryFromReader);
      msg.addCharacters(value);
      break;
    case 3:
      var value = new proto.service.ActionConfig.Object;
      reader.readMessage(value,proto.service.ActionConfig.Object.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassification(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContextLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ActionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ActionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ActionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getCharactersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.service.ActionConfig.Character.serializeBinaryToWriter
    );
  }
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.service.ActionConfig.Object.serializeBinaryToWriter
    );
  }
  f = message.getClassification();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContextLevel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ActionConfig.Character.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ActionConfig.Character.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ActionConfig.Character} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Character.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bio: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ActionConfig.Character}
 */
proto.service.ActionConfig.Character.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ActionConfig.Character;
  return proto.service.ActionConfig.Character.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ActionConfig.Character} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ActionConfig.Character}
 */
proto.service.ActionConfig.Character.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ActionConfig.Character.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ActionConfig.Character.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ActionConfig.Character} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Character.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBio();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.ActionConfig.Character.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ActionConfig.Character} returns this
 */
proto.service.ActionConfig.Character.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bio = 2;
 * @return {string}
 */
proto.service.ActionConfig.Character.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ActionConfig.Character} returns this
 */
proto.service.ActionConfig.Character.prototype.setBio = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.ActionConfig.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.service.ActionConfig.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.ActionConfig.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.ActionConfig.Object}
 */
proto.service.ActionConfig.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.ActionConfig.Object;
  return proto.service.ActionConfig.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.ActionConfig.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.ActionConfig.Object}
 */
proto.service.ActionConfig.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.ActionConfig.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.ActionConfig.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.ActionConfig.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.ActionConfig.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.ActionConfig.Object.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ActionConfig.Object} returns this
 */
proto.service.ActionConfig.Object.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.service.ActionConfig.Object.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ActionConfig.Object} returns this
 */
proto.service.ActionConfig.Object.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string actions = 1;
 * @return {!Array<string>}
 */
proto.service.ActionConfig.prototype.getActionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.service.ActionConfig} returns this
 */
proto.service.ActionConfig.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.service.ActionConfig} returns this
 */
proto.service.ActionConfig.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.ActionConfig} returns this
 */
proto.service.ActionConfig.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};


/**
 * repeated Character characters = 2;
 * @return {!Array<!proto.service.ActionConfig.Character>}
 */
proto.service.ActionConfig.prototype.getCharactersList = function() {
  return /** @type{!Array<!proto.service.ActionConfig.Character>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.ActionConfig.Character, 2));
};


/**
 * @param {!Array<!proto.service.ActionConfig.Character>} value
 * @return {!proto.service.ActionConfig} returns this
*/
proto.service.ActionConfig.prototype.setCharactersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.service.ActionConfig.Character=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.ActionConfig.Character}
 */
proto.service.ActionConfig.prototype.addCharacters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.service.ActionConfig.Character, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.ActionConfig} returns this
 */
proto.service.ActionConfig.prototype.clearCharactersList = function() {
  return this.setCharactersList([]);
};


/**
 * repeated Object objects = 3;
 * @return {!Array<!proto.service.ActionConfig.Object>}
 */
proto.service.ActionConfig.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.service.ActionConfig.Object>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.service.ActionConfig.Object, 3));
};


/**
 * @param {!Array<!proto.service.ActionConfig.Object>} value
 * @return {!proto.service.ActionConfig} returns this
*/
proto.service.ActionConfig.prototype.setObjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.service.ActionConfig.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.service.ActionConfig.Object}
 */
proto.service.ActionConfig.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.service.ActionConfig.Object, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.service.ActionConfig} returns this
 */
proto.service.ActionConfig.prototype.clearObjectsList = function() {
  return this.setObjectsList([]);
};


/**
 * optional string classification = 4;
 * @return {string}
 */
proto.service.ActionConfig.prototype.getClassification = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.ActionConfig} returns this
 */
proto.service.ActionConfig.prototype.setClassification = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 context_level = 5;
 * @return {number}
 */
proto.service.ActionConfig.prototype.getContextLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.service.ActionConfig} returns this
 */
proto.service.ActionConfig.prototype.setContextLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.STTRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.service.STTRequest.RequestTypeCase = {
  REQUEST_TYPE_NOT_SET: 0,
  AUDIO_CONFIG: 1,
  AUDIO_CHUNK: 2
};

/**
 * @return {proto.service.STTRequest.RequestTypeCase}
 */
proto.service.STTRequest.prototype.getRequestTypeCase = function() {
  return /** @type {proto.service.STTRequest.RequestTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.STTRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.STTRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.STTRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.STTRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioConfig: (f = msg.getAudioConfig()) && proto.service.AudioConfig.toObject(includeInstance, f),
    audioChunk: msg.getAudioChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.STTRequest}
 */
proto.service.STTRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.STTRequest;
  return proto.service.STTRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.STTRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.STTRequest}
 */
proto.service.STTRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.AudioConfig;
      reader.readMessage(value,proto.service.AudioConfig.deserializeBinaryFromReader);
      msg.setAudioConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.STTRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.STTRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.STTRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.AudioConfig.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional AudioConfig audio_config = 1;
 * @return {?proto.service.AudioConfig}
 */
proto.service.STTRequest.prototype.getAudioConfig = function() {
  return /** @type{?proto.service.AudioConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.AudioConfig, 1));
};


/**
 * @param {?proto.service.AudioConfig|undefined} value
 * @return {!proto.service.STTRequest} returns this
*/
proto.service.STTRequest.prototype.setAudioConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.service.STTRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.STTRequest} returns this
 */
proto.service.STTRequest.prototype.clearAudioConfig = function() {
  return this.setAudioConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.STTRequest.prototype.hasAudioConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audio_chunk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.service.STTRequest.prototype.getAudioChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audio_chunk = 2;
 * This is a type-conversion wrapper around `getAudioChunk()`
 * @return {string}
 */
proto.service.STTRequest.prototype.getAudioChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioChunk()));
};


/**
 * optional bytes audio_chunk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioChunk()`
 * @return {!Uint8Array}
 */
proto.service.STTRequest.prototype.getAudioChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.STTRequest} returns this
 */
proto.service.STTRequest.prototype.setAudioChunk = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.service.STTRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.STTRequest} returns this
 */
proto.service.STTRequest.prototype.clearAudioChunk = function() {
  return jspb.Message.setOneofField(this, 2, proto.service.STTRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.STTRequest.prototype.hasAudioChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.STTResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.STTResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.STTResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.STTResponse}
 */
proto.service.STTResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.STTResponse;
  return proto.service.STTResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.STTResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.STTResponse}
 */
proto.service.STTResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.STTResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.STTResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.STTResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.STTResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.service.STTResponse.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.STTResponse} returns this
 */
proto.service.STTResponse.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.GetResponseRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.service.GetResponseRequest.RequestTypeCase = {
  REQUEST_TYPE_NOT_SET: 0,
  GET_RESPONSE_CONFIG: 1,
  GET_RESPONSE_DATA: 2
};

/**
 * @return {proto.service.GetResponseRequest.RequestTypeCase}
 */
proto.service.GetResponseRequest.prototype.getRequestTypeCase = function() {
  return /** @type {proto.service.GetResponseRequest.RequestTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.GetResponseRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    getResponseConfig: (f = msg.getGetResponseConfig()) && proto.service.GetResponseRequest.GetResponseConfig.toObject(includeInstance, f),
    getResponseData: (f = msg.getGetResponseData()) && proto.service.GetResponseRequest.GetResponseData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequest;
  return proto.service.GetResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.GetResponseRequest.GetResponseConfig;
      reader.readMessage(value,proto.service.GetResponseRequest.GetResponseConfig.deserializeBinaryFromReader);
      msg.setGetResponseConfig(value);
      break;
    case 2:
      var value = new proto.service.GetResponseRequest.GetResponseData;
      reader.readMessage(value,proto.service.GetResponseRequest.GetResponseData.deserializeBinaryFromReader);
      msg.setGetResponseData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetResponseConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.GetResponseRequest.GetResponseConfig.serializeBinaryToWriter
    );
  }
  f = message.getGetResponseData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.GetResponseRequest.GetResponseData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequest.GetResponseConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequest.GetResponseConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apiKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    audioConfig: (f = msg.getAudioConfig()) && proto.service.AudioConfig.toObject(includeInstance, f),
    actionConfig: (f = msg.getActionConfig()) && proto.service.ActionConfig.toObject(includeInstance, f),
    speaker: jspb.Message.getFieldWithDefault(msg, 7, ""),
    languageCode: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequest.GetResponseConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequest.GetResponseConfig;
  return proto.service.GetResponseRequest.GetResponseConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequest.GetResponseConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequest.GetResponseConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiKey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 5:
      var value = new proto.service.AudioConfig;
      reader.readMessage(value,proto.service.AudioConfig.deserializeBinaryFromReader);
      msg.setAudioConfig(value);
      break;
    case 6:
      var value = new proto.service.ActionConfig;
      reader.readMessage(value,proto.service.ActionConfig.deserializeBinaryFromReader);
      msg.setActionConfig(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeaker(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequest.GetResponseConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequest.GetResponseConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAudioConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.service.AudioConfig.serializeBinaryToWriter
    );
  }
  f = message.getActionConfig();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.service.ActionConfig.serializeBinaryToWriter
    );
  }
  f = message.getSpeaker();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string character_id = 2;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getCharacterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string api_key = 3;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setApiKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string session_id = 4;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional AudioConfig audio_config = 5;
 * @return {?proto.service.AudioConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getAudioConfig = function() {
  return /** @type{?proto.service.AudioConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.AudioConfig, 5));
};


/**
 * @param {?proto.service.AudioConfig|undefined} value
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
*/
proto.service.GetResponseRequest.GetResponseConfig.prototype.setAudioConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.clearAudioConfig = function() {
  return this.setAudioConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.hasAudioConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ActionConfig action_config = 6;
 * @return {?proto.service.ActionConfig}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getActionConfig = function() {
  return /** @type{?proto.service.ActionConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.ActionConfig, 6));
};


/**
 * @param {?proto.service.ActionConfig|undefined} value
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
*/
proto.service.GetResponseRequest.GetResponseConfig.prototype.setActionConfig = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.clearActionConfig = function() {
  return this.setActionConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.hasActionConfig = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string speaker = 7;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getSpeaker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setSpeaker = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string language_code = 8;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseRequest.GetResponseConfig} returns this
 */
proto.service.GetResponseRequest.GetResponseConfig.prototype.setLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.GetResponseRequest.GetResponseData.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.service.GetResponseRequest.GetResponseData.InputTypeCase = {
  INPUT_TYPE_NOT_SET: 0,
  AUDIO_DATA: 1,
  TEXT_DATA: 2
};

/**
 * @return {proto.service.GetResponseRequest.GetResponseData.InputTypeCase}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getInputTypeCase = function() {
  return /** @type {proto.service.GetResponseRequest.GetResponseData.InputTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequest.GetResponseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequest.GetResponseData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioData: msg.getAudioData_asB64(),
    textData: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequest.GetResponseData}
 */
proto.service.GetResponseRequest.GetResponseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequest.GetResponseData;
  return proto.service.GetResponseRequest.GetResponseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequest.GetResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequest.GetResponseData}
 */
proto.service.GetResponseRequest.GetResponseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequest.GetResponseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequest.GetResponseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequest.GetResponseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes audio_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getAudioData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes audio_data = 1;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.GetResponseRequest.GetResponseData} returns this
 */
proto.service.GetResponseRequest.GetResponseData.prototype.setAudioData = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.GetResponseRequest.GetResponseData} returns this
 */
proto.service.GetResponseRequest.GetResponseData.prototype.clearAudioData = function() {
  return jspb.Message.setOneofField(this, 1, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.hasAudioData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string text_data = 2;
 * @return {string}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.getTextData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseRequest.GetResponseData} returns this
 */
proto.service.GetResponseRequest.GetResponseData.prototype.setTextData = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.GetResponseRequest.GetResponseData} returns this
 */
proto.service.GetResponseRequest.GetResponseData.prototype.clearTextData = function() {
  return jspb.Message.setOneofField(this, 2, proto.service.GetResponseRequest.GetResponseData.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequest.GetResponseData.prototype.hasTextData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetResponseConfig get_response_config = 1;
 * @return {?proto.service.GetResponseRequest.GetResponseConfig}
 */
proto.service.GetResponseRequest.prototype.getGetResponseConfig = function() {
  return /** @type{?proto.service.GetResponseRequest.GetResponseConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest.GetResponseConfig, 1));
};


/**
 * @param {?proto.service.GetResponseRequest.GetResponseConfig|undefined} value
 * @return {!proto.service.GetResponseRequest} returns this
*/
proto.service.GetResponseRequest.prototype.setGetResponseConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.service.GetResponseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseRequest} returns this
 */
proto.service.GetResponseRequest.prototype.clearGetResponseConfig = function() {
  return this.setGetResponseConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequest.prototype.hasGetResponseConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetResponseData get_response_data = 2;
 * @return {?proto.service.GetResponseRequest.GetResponseData}
 */
proto.service.GetResponseRequest.prototype.getGetResponseData = function() {
  return /** @type{?proto.service.GetResponseRequest.GetResponseData} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest.GetResponseData, 2));
};


/**
 * @param {?proto.service.GetResponseRequest.GetResponseData|undefined} value
 * @return {!proto.service.GetResponseRequest} returns this
*/
proto.service.GetResponseRequest.prototype.setGetResponseData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.service.GetResponseRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseRequest} returns this
 */
proto.service.GetResponseRequest.prototype.clearGetResponseData = function() {
  return this.setGetResponseData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequest.prototype.hasGetResponseData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseRequestSingle.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseRequestSingle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseRequestSingle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequestSingle.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseConfig: (f = msg.getResponseConfig()) && proto.service.GetResponseRequest.toObject(includeInstance, f),
    responseData: (f = msg.getResponseData()) && proto.service.GetResponseRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseRequestSingle}
 */
proto.service.GetResponseRequestSingle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseRequestSingle;
  return proto.service.GetResponseRequestSingle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseRequestSingle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseRequestSingle}
 */
proto.service.GetResponseRequestSingle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.service.GetResponseRequest;
      reader.readMessage(value,proto.service.GetResponseRequest.deserializeBinaryFromReader);
      msg.setResponseConfig(value);
      break;
    case 2:
      var value = new proto.service.GetResponseRequest;
      reader.readMessage(value,proto.service.GetResponseRequest.deserializeBinaryFromReader);
      msg.setResponseData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseRequestSingle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseRequestSingle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseRequestSingle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseRequestSingle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.service.GetResponseRequest.serializeBinaryToWriter
    );
  }
  f = message.getResponseData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.GetResponseRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetResponseRequest response_config = 1;
 * @return {?proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequestSingle.prototype.getResponseConfig = function() {
  return /** @type{?proto.service.GetResponseRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest, 1));
};


/**
 * @param {?proto.service.GetResponseRequest|undefined} value
 * @return {!proto.service.GetResponseRequestSingle} returns this
*/
proto.service.GetResponseRequestSingle.prototype.setResponseConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseRequestSingle} returns this
 */
proto.service.GetResponseRequestSingle.prototype.clearResponseConfig = function() {
  return this.setResponseConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequestSingle.prototype.hasResponseConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetResponseRequest response_data = 2;
 * @return {?proto.service.GetResponseRequest}
 */
proto.service.GetResponseRequestSingle.prototype.getResponseData = function() {
  return /** @type{?proto.service.GetResponseRequest} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseRequest, 2));
};


/**
 * @param {?proto.service.GetResponseRequest|undefined} value
 * @return {!proto.service.GetResponseRequestSingle} returns this
*/
proto.service.GetResponseRequestSingle.prototype.setResponseData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseRequestSingle} returns this
 */
proto.service.GetResponseRequestSingle.prototype.clearResponseData = function() {
  return this.setResponseData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseRequestSingle.prototype.hasResponseData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.service.GetResponseResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.service.GetResponseResponse.ResponseTypeCase = {
  RESPONSE_TYPE_NOT_SET: 0,
  ACTION_RESPONSE: 2,
  AUDIO_RESPONSE: 3,
  DEBUG_LOG: 4,
  USER_QUERY: 5
};

/**
 * @return {proto.service.GetResponseResponse.ResponseTypeCase}
 */
proto.service.GetResponseResponse.prototype.getResponseTypeCase = function() {
  return /** @type {proto.service.GetResponseResponse.ResponseTypeCase} */(jspb.Message.computeOneofCase(this, proto.service.GetResponseResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actionResponse: (f = msg.getActionResponse()) && proto.service.GetResponseResponse.ActionResponse.toObject(includeInstance, f),
    audioResponse: (f = msg.getAudioResponse()) && proto.service.GetResponseResponse.AudioResponse.toObject(includeInstance, f),
    debugLog: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userQuery: (f = msg.getUserQuery()) && proto.service.GetResponseResponse.UserTranscript.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse}
 */
proto.service.GetResponseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse;
  return proto.service.GetResponseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse}
 */
proto.service.GetResponseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new proto.service.GetResponseResponse.ActionResponse;
      reader.readMessage(value,proto.service.GetResponseResponse.ActionResponse.deserializeBinaryFromReader);
      msg.setActionResponse(value);
      break;
    case 3:
      var value = new proto.service.GetResponseResponse.AudioResponse;
      reader.readMessage(value,proto.service.GetResponseResponse.AudioResponse.deserializeBinaryFromReader);
      msg.setAudioResponse(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugLog(value);
      break;
    case 5:
      var value = new proto.service.GetResponseResponse.UserTranscript;
      reader.readMessage(value,proto.service.GetResponseResponse.UserTranscript.deserializeBinaryFromReader);
      msg.setUserQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActionResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.GetResponseResponse.ActionResponse.serializeBinaryToWriter
    );
  }
  f = message.getAudioResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.service.GetResponseResponse.AudioResponse.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserQuery();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.service.GetResponseResponse.UserTranscript.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.AudioResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse.AudioResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.AudioResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    audioData: msg.getAudioData_asB64(),
    audioConfig: (f = msg.getAudioConfig()) && proto.service.AudioConfig.toObject(includeInstance, f),
    textData: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endOfResponse: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse.AudioResponse}
 */
proto.service.GetResponseResponse.AudioResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse.AudioResponse;
  return proto.service.GetResponseResponse.AudioResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse.AudioResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse.AudioResponse}
 */
proto.service.GetResponseResponse.AudioResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    case 2:
      var value = new proto.service.AudioConfig;
      reader.readMessage(value,proto.service.AudioConfig.deserializeBinaryFromReader);
      msg.setAudioConfig(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextData(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndOfResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.AudioResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse.AudioResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.AudioResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudioData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAudioConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.service.AudioConfig.serializeBinaryToWriter
    );
  }
  f = message.getTextData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndOfResponse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes audio_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes audio_data = 1;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.service.GetResponseResponse.AudioResponse} returns this
 */
proto.service.GetResponseResponse.AudioResponse.prototype.setAudioData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AudioConfig audio_config = 2;
 * @return {?proto.service.AudioConfig}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getAudioConfig = function() {
  return /** @type{?proto.service.AudioConfig} */ (
    jspb.Message.getWrapperField(this, proto.service.AudioConfig, 2));
};


/**
 * @param {?proto.service.AudioConfig|undefined} value
 * @return {!proto.service.GetResponseResponse.AudioResponse} returns this
*/
proto.service.GetResponseResponse.AudioResponse.prototype.setAudioConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseResponse.AudioResponse} returns this
 */
proto.service.GetResponseResponse.AudioResponse.prototype.clearAudioConfig = function() {
  return this.setAudioConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.hasAudioConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string text_data = 3;
 * @return {string}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getTextData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseResponse.AudioResponse} returns this
 */
proto.service.GetResponseResponse.AudioResponse.prototype.setTextData = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool end_of_response = 4;
 * @return {boolean}
 */
proto.service.GetResponseResponse.AudioResponse.prototype.getEndOfResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.service.GetResponseResponse.AudioResponse} returns this
 */
proto.service.GetResponseResponse.AudioResponse.prototype.setEndOfResponse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.ActionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.ActionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse.ActionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.ActionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse.ActionResponse}
 */
proto.service.GetResponseResponse.ActionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse.ActionResponse;
  return proto.service.GetResponseResponse.ActionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse.ActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse.ActionResponse}
 */
proto.service.GetResponseResponse.ActionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.ActionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.ActionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse.ActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.ActionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.service.GetResponseResponse.ActionResponse.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseResponse.ActionResponse} returns this
 */
proto.service.GetResponseResponse.ActionResponse.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.toObject = function(opt_includeInstance) {
  return proto.service.GetResponseResponse.UserTranscript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.GetResponseResponse.UserTranscript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.UserTranscript.toObject = function(includeInstance, msg) {
  var f, obj = {
    textData: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    endOfResponse: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.GetResponseResponse.UserTranscript}
 */
proto.service.GetResponseResponse.UserTranscript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.GetResponseResponse.UserTranscript;
  return proto.service.GetResponseResponse.UserTranscript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.GetResponseResponse.UserTranscript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.GetResponseResponse.UserTranscript}
 */
proto.service.GetResponseResponse.UserTranscript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEndOfResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.GetResponseResponse.UserTranscript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.GetResponseResponse.UserTranscript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.GetResponseResponse.UserTranscript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEndOfResponse();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string text_data = 1;
 * @return {string}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.getTextData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseResponse.UserTranscript} returns this
 */
proto.service.GetResponseResponse.UserTranscript.prototype.setTextData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_final = 2;
 * @return {boolean}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.service.GetResponseResponse.UserTranscript} returns this
 */
proto.service.GetResponseResponse.UserTranscript.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool end_of_response = 3;
 * @return {boolean}
 */
proto.service.GetResponseResponse.UserTranscript.prototype.getEndOfResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.service.GetResponseResponse.UserTranscript} returns this
 */
proto.service.GetResponseResponse.UserTranscript.prototype.setEndOfResponse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.service.GetResponseResponse.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseResponse} returns this
 */
proto.service.GetResponseResponse.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ActionResponse action_response = 2;
 * @return {?proto.service.GetResponseResponse.ActionResponse}
 */
proto.service.GetResponseResponse.prototype.getActionResponse = function() {
  return /** @type{?proto.service.GetResponseResponse.ActionResponse} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseResponse.ActionResponse, 2));
};


/**
 * @param {?proto.service.GetResponseResponse.ActionResponse|undefined} value
 * @return {!proto.service.GetResponseResponse} returns this
*/
proto.service.GetResponseResponse.prototype.setActionResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseResponse} returns this
 */
proto.service.GetResponseResponse.prototype.clearActionResponse = function() {
  return this.setActionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseResponse.prototype.hasActionResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AudioResponse audio_response = 3;
 * @return {?proto.service.GetResponseResponse.AudioResponse}
 */
proto.service.GetResponseResponse.prototype.getAudioResponse = function() {
  return /** @type{?proto.service.GetResponseResponse.AudioResponse} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseResponse.AudioResponse, 3));
};


/**
 * @param {?proto.service.GetResponseResponse.AudioResponse|undefined} value
 * @return {!proto.service.GetResponseResponse} returns this
*/
proto.service.GetResponseResponse.prototype.setAudioResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseResponse} returns this
 */
proto.service.GetResponseResponse.prototype.clearAudioResponse = function() {
  return this.setAudioResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseResponse.prototype.hasAudioResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string debug_log = 4;
 * @return {string}
 */
proto.service.GetResponseResponse.prototype.getDebugLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.GetResponseResponse} returns this
 */
proto.service.GetResponseResponse.prototype.setDebugLog = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.service.GetResponseResponse} returns this
 */
proto.service.GetResponseResponse.prototype.clearDebugLog = function() {
  return jspb.Message.setOneofField(this, 4, proto.service.GetResponseResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseResponse.prototype.hasDebugLog = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UserTranscript user_query = 5;
 * @return {?proto.service.GetResponseResponse.UserTranscript}
 */
proto.service.GetResponseResponse.prototype.getUserQuery = function() {
  return /** @type{?proto.service.GetResponseResponse.UserTranscript} */ (
    jspb.Message.getWrapperField(this, proto.service.GetResponseResponse.UserTranscript, 5));
};


/**
 * @param {?proto.service.GetResponseResponse.UserTranscript|undefined} value
 * @return {!proto.service.GetResponseResponse} returns this
*/
proto.service.GetResponseResponse.prototype.setUserQuery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.service.GetResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.service.GetResponseResponse} returns this
 */
proto.service.GetResponseResponse.prototype.clearUserQuery = function() {
  return this.setUserQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.GetResponseResponse.prototype.hasUserQuery = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.HelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.HelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.HelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.HelloRequest}
 */
proto.service.HelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.HelloRequest;
  return proto.service.HelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.HelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.HelloRequest}
 */
proto.service.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.HelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.HelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.HelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.HelloRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.HelloRequest} returns this
 */
proto.service.HelloRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.HelloResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.HelloResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.HelloResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.HelloResponse}
 */
proto.service.HelloResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.HelloResponse;
  return proto.service.HelloResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.HelloResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.HelloResponse}
 */
proto.service.HelloResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.HelloResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.HelloResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.HelloResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.HelloResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.service.HelloResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.service.HelloResponse} returns this
 */
proto.service.HelloResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.service);
